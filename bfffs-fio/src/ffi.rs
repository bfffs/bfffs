#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(unused)]
#![allow(clippy::all)]
use libc::timespec;
/* automatically generated by rust-bindgen */

pub const FIO_IOOPS_VERSION: u32 = 25;
pub type __uint8_t = libc::c_uchar;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __intptr_t = __int64_t;
pub type __size_t = __uint64_t;
pub type __time_t = __int64_t;
pub type __off_t = __int64_t;
pub type __pid_t = __int32_t;
pub type __suseconds_t = libc::c_long;
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [libc::c_char; 128usize],
    pub _mbstateL: __int64_t,
    _bindgen_union_align: [u64; 16usize],
}
pub type time_t = __time_t;
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex {
    _unused: [u8; 0],
}
pub type pthread_t = *mut pthread;
pub type pthread_mutex_t = *mut pthread_mutex;
pub type pthread_cond_t = *mut pthread_cond;
pub type suseconds_t = __suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: libc::c_long,
    pub ru_ixrss: libc::c_long,
    pub ru_idrss: libc::c_long,
    pub ru_isrss: libc::c_long,
    pub ru_minflt: libc::c_long,
    pub ru_majflt: libc::c_long,
    pub ru_nswap: libc::c_long,
    pub ru_inblock: libc::c_long,
    pub ru_oublock: libc::c_long,
    pub ru_msgsnd: libc::c_long,
    pub ru_msgrcv: libc::c_long,
    pub ru_nsignals: libc::c_long,
    pub ru_nvcsw: libc::c_long,
    pub ru_nivcsw: libc::c_long,
}
pub type fpos_t = __off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut libc::c_uchar,
    pub _size: libc::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut libc::c_uchar,
    pub _r: libc::c_int,
    pub _w: libc::c_int,
    pub _flags: libc::c_short,
    pub _file: libc::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: libc::c_int,
    pub _cookie: *mut libc::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void) -> libc::c_int>,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut libc::c_void,
            arg2: *mut libc::c_char,
            arg3: libc::c_int,
        ) -> libc::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut libc::c_void, arg2: fpos_t, arg3: libc::c_int) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut libc::c_void,
            arg2: *const libc::c_char,
            arg3: libc::c_int,
        ) -> libc::c_int,
    >,
    pub _ub: __sbuf,
    pub _up: *mut libc::c_uchar,
    pub _ur: libc::c_int,
    pub _ubuf: [libc::c_uchar; 3usize],
    pub _nbuf: [libc::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: libc::c_int,
    pub _offset: fpos_t,
    pub _fl_mutex: *mut pthread_mutex,
    pub _fl_owner: *mut pthread,
    pub _fl_count: libc::c_int,
    pub _orientation: libc::c_int,
    pub _mbstate: __mbstate_t,
    pub _flags2: libc::c_int,
}
pub type FILE = __sFILE;
pub type bool_ = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpuset {
    pub __bits: [libc::c_long; 4usize],
}
pub type cpuset_t = _cpuset;
pub const fio_ddir_DDIR_READ: fio_ddir = 0;
pub const fio_ddir_DDIR_WRITE: fio_ddir = 1;
pub const fio_ddir_DDIR_TRIM: fio_ddir = 2;
pub const fio_ddir_DDIR_SYNC: fio_ddir = 3;
pub const fio_ddir_DDIR_DATASYNC: fio_ddir = 4;
pub const fio_ddir_DDIR_SYNC_FILE_RANGE: fio_ddir = 5;
pub const fio_ddir_DDIR_WAIT: fio_ddir = 6;
pub const fio_ddir_DDIR_LAST: fio_ddir = 7;
pub const fio_ddir_DDIR_INVAL: fio_ddir = -1;
pub const fio_ddir_DDIR_RWDIR_CNT: fio_ddir = 3;
pub const fio_ddir_DDIR_RWDIR_SYNC_CNT: fio_ddir = 4;
pub type fio_ddir = i32;
pub const td_ddir_TD_DDIR_READ: td_ddir = 1;
pub const td_ddir_TD_DDIR_WRITE: td_ddir = 2;
pub const td_ddir_TD_DDIR_RAND: td_ddir = 4;
pub const td_ddir_TD_DDIR_TRIM: td_ddir = 8;
pub const td_ddir_TD_DDIR_RW: td_ddir = 3;
pub const td_ddir_TD_DDIR_RANDREAD: td_ddir = 5;
pub const td_ddir_TD_DDIR_RANDWRITE: td_ddir = 6;
pub const td_ddir_TD_DDIR_RANDRW: td_ddir = 7;
pub const td_ddir_TD_DDIR_RANDTRIM: td_ddir = 12;
pub const td_ddir_TD_DDIR_TRIMWRITE: td_ddir = 10;
pub type td_ddir = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flist_head {
    pub next: *mut flist_head,
    pub prev: *mut flist_head,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taus88_state {
    pub s1: libc::c_uint,
    pub s2: libc::c_uint,
    pub s3: libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taus258_state {
    pub s1: u64,
    pub s2: u64,
    pub s3: u64,
    pub s4: u64,
    pub s5: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct frand_state {
    pub use64: libc::c_uint,
    pub __bindgen_anon_1: frand_state__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union frand_state__bindgen_ty_1 {
    pub state32: taus88_state,
    pub state64: taus258_state,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zipf_state {
    pub nranges: u64,
    pub theta: f64,
    pub zeta2: f64,
    pub zetan: f64,
    pub pareto_pow: f64,
    pub rand: frand_state,
    pub rand_off: u64,
    pub disable_hash: bool_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct axmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_lfsr {
    pub xormask: u64,
    pub last_val: u64,
    pub cached_bit: u64,
    pub max_val: u64,
    pub num_vals: u64,
    pub cycle_length: u64,
    pub cached_cycle_length: u64,
    pub spin: libc::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gauss_state {
    pub r: frand_state,
    pub nranges: u64,
    pub stddev: libc::c_uint,
    pub disable_hash: bool_,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zoned_block_device_info {
    _unused: [u8; 0],
}
pub const fio_filetype_FIO_TYPE_FILE: fio_filetype = 1;
pub const fio_filetype_FIO_TYPE_BLOCK: fio_filetype = 2;
pub const fio_filetype_FIO_TYPE_CHAR: fio_filetype = 3;
pub const fio_filetype_FIO_TYPE_PIPE: fio_filetype = 4;
pub type fio_filetype = u32;
pub const fio_file_flags_FIO_FILE_open: fio_file_flags = 1;
pub const fio_file_flags_FIO_FILE_closing: fio_file_flags = 2;
pub const fio_file_flags_FIO_FILE_extend: fio_file_flags = 4;
pub const fio_file_flags_FIO_FILE_done: fio_file_flags = 8;
pub const fio_file_flags_FIO_FILE_size_known: fio_file_flags = 16;
pub const fio_file_flags_FIO_FILE_hashed: fio_file_flags = 32;
pub const fio_file_flags_FIO_FILE_partial_mmap: fio_file_flags = 64;
pub const fio_file_flags_FIO_FILE_axmap: fio_file_flags = 128;
pub const fio_file_flags_FIO_FILE_lfsr: fio_file_flags = 256;
pub type fio_file_flags = u32;
pub const file_lock_mode_FILE_LOCK_NONE: file_lock_mode = 0;
pub const file_lock_mode_FILE_LOCK_EXCLUSIVE: file_lock_mode = 1;
pub const file_lock_mode_FILE_LOCK_READWRITE: file_lock_mode = 2;
pub type file_lock_mode = u32;
pub const fio_fallocate_mode_FIO_FALLOCATE_NONE: fio_fallocate_mode = 1;
pub const fio_fallocate_mode_FIO_FALLOCATE_POSIX: fio_fallocate_mode = 2;
pub const fio_fallocate_mode_FIO_FALLOCATE_KEEP_SIZE: fio_fallocate_mode = 3;
pub const fio_fallocate_mode_FIO_FALLOCATE_NATIVE: fio_fallocate_mode = 4;
pub type fio_fallocate_mode = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fio_file {
    pub hash_list: flist_head,
    pub filetype: fio_filetype,
    pub fd: libc::c_int,
    pub shadow_fd: libc::c_int,
    pub major: libc::c_uint,
    pub minor: libc::c_uint,
    pub fileno: libc::c_int,
    pub file_name: *mut libc::c_char,
    pub real_file_size: u64,
    pub file_offset: u64,
    pub io_size: u64,
    pub zbd_info: *mut zoned_block_device_info,
    pub last_pos: [u64; 3usize],
    pub last_start: [u64; 3usize],
    pub first_write: u64,
    pub last_write: u64,
    pub last_write_comp: *mut u64,
    pub last_write_idx: libc::c_uint,
    pub __bindgen_anon_1: fio_file__bindgen_ty_1,
    pub __bindgen_anon_2: fio_file__bindgen_ty_2,
    pub __bindgen_anon_3: fio_file__bindgen_ty_3,
    pub __bindgen_anon_4: fio_file__bindgen_ty_4,
    pub references: libc::c_int,
    pub flags: fio_file_flags,
    pub du: *mut disk_util,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_1 {
    pub engine_pos: u64,
    pub engine_data: *mut libc::c_void,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_2 {
    pub lock: *mut fio_sem,
    pub rwlock: *mut fio_rwlock,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_3 {
    pub io_axmap: *mut axmap,
    pub lfsr: fio_lfsr,
    _bindgen_union_align: [u64; 8usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union fio_file__bindgen_ty_4 {
    pub zipf: zipf_state,
    pub gauss: gauss_state,
    _bindgen_union_align: [u64; 13usize],
}
extern "C" {
    pub fn generic_open_file(arg1: *mut thread_data, arg2: *mut fio_file) -> libc::c_int;
}
extern "C" {
    pub fn generic_close_file(arg1: *mut thread_data, arg2: *mut fio_file) -> libc::c_int;
}
pub type os_cpu_mask_t = cpuset_t;
pub const fio_opt_type_FIO_OPT_INVALID: fio_opt_type = 0;
pub const fio_opt_type_FIO_OPT_STR: fio_opt_type = 1;
pub const fio_opt_type_FIO_OPT_STR_ULL: fio_opt_type = 2;
pub const fio_opt_type_FIO_OPT_STR_MULTI: fio_opt_type = 3;
pub const fio_opt_type_FIO_OPT_STR_VAL: fio_opt_type = 4;
pub const fio_opt_type_FIO_OPT_STR_VAL_TIME: fio_opt_type = 5;
pub const fio_opt_type_FIO_OPT_STR_STORE: fio_opt_type = 6;
pub const fio_opt_type_FIO_OPT_RANGE: fio_opt_type = 7;
pub const fio_opt_type_FIO_OPT_INT: fio_opt_type = 8;
pub const fio_opt_type_FIO_OPT_ULL: fio_opt_type = 9;
pub const fio_opt_type_FIO_OPT_BOOL: fio_opt_type = 10;
pub const fio_opt_type_FIO_OPT_FLOAT_LIST: fio_opt_type = 11;
pub const fio_opt_type_FIO_OPT_STR_SET: fio_opt_type = 12;
pub const fio_opt_type_FIO_OPT_DEPRECATED: fio_opt_type = 13;
pub const fio_opt_type_FIO_OPT_SOFT_DEPRECATED: fio_opt_type = 14;
pub const fio_opt_type_FIO_OPT_UNSUPPORTED: fio_opt_type = 15;
pub type fio_opt_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct value_pair {
    pub ival: *const libc::c_char,
    pub oval: libc::c_ulonglong,
    pub help: *const libc::c_char,
    pub orval: libc::c_int,
    pub cb: *mut libc::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_option {
    pub name: *const libc::c_char,
    pub lname: *const libc::c_char,
    pub alias: *const libc::c_char,
    pub type_: fio_opt_type,
    pub off1: libc::c_uint,
    pub off2: libc::c_uint,
    pub off3: libc::c_uint,
    pub off4: libc::c_uint,
    pub off5: libc::c_uint,
    pub off6: libc::c_uint,
    pub maxval: libc::c_ulonglong,
    pub minval: libc::c_int,
    pub maxfp: f64,
    pub minfp: f64,
    pub interval: libc::c_uint,
    pub maxlen: libc::c_uint,
    pub neg: libc::c_int,
    pub prio: libc::c_int,
    pub cb: *mut libc::c_void,
    pub help: *const libc::c_char,
    pub def: *const libc::c_char,
    pub posval: [value_pair; 32usize],
    pub parent: *const libc::c_char,
    pub hide: libc::c_int,
    pub hide_on_set: libc::c_int,
    pub inverse: *const libc::c_char,
    pub inv_opt: *mut fio_option,
    pub verify: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const fio_option, arg2: *mut libc::c_void) -> libc::c_int,
    >,
    pub prof_name: *const libc::c_char,
    pub prof_opts: *mut libc::c_void,
    pub category: u64,
    pub group: u64,
    pub gui_data: *mut libc::c_void,
    pub is_seconds: libc::c_int,
    pub is_time: libc::c_int,
    pub no_warn_def: libc::c_int,
    pub pow2: libc::c_int,
    pub no_free: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_rb_node {
    pub rb_parent_color: isize,
    pub rb_right: *mut fio_rb_node,
    pub rb_left: *mut fio_rb_node,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_root {
    pub rb_node: *mut fio_rb_node,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fio_fp64 {
    pub u: fio_fp64__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union fio_fp64__bindgen_ty_1 {
    pub i: u64,
    pub f: f64,
    pub filler: [u8; 16usize],
    _bindgen_union_align: [u64; 2usize],
}
pub type fio_fp64_t = fio_fp64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct workqueue_work {
    pub list: flist_head,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct submit_worker {
    pub thread: pthread_t,
    pub lock: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub work_list: flist_head,
    pub flags: libc::c_uint,
    pub index: libc::c_uint,
    pub seq: u64,
    pub wq: *mut workqueue,
    pub priv_: *mut libc::c_void,
    pub sk_out: *mut sk_out,
}
pub type workqueue_work_fn = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut submit_worker, arg2: *mut workqueue_work) -> libc::c_int,
>;
pub type workqueue_pre_sleep_flush_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut submit_worker) -> bool_>;
pub type workqueue_pre_sleep_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut submit_worker)>;
pub type workqueue_alloc_worker_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut submit_worker) -> libc::c_int>;
pub type workqueue_free_worker_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut submit_worker)>;
pub type workqueue_init_worker_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut submit_worker) -> libc::c_int>;
pub type workqueue_exit_worker_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut submit_worker, arg2: *mut libc::c_uint)>;
pub type workqueue_update_acct_fn =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut submit_worker)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct workqueue_ops {
    pub fn_: workqueue_work_fn,
    pub pre_sleep_flush_fn: workqueue_pre_sleep_flush_fn,
    pub pre_sleep_fn: workqueue_pre_sleep_fn,
    pub update_acct_fn: workqueue_update_acct_fn,
    pub alloc_worker_fn: workqueue_alloc_worker_fn,
    pub free_worker_fn: workqueue_free_worker_fn,
    pub init_worker_fn: workqueue_init_worker_fn,
    pub exit_worker_fn: workqueue_exit_worker_fn,
    pub nice: libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct workqueue {
    pub max_workers: libc::c_uint,
    pub td: *mut thread_data,
    pub ops: workqueue_ops,
    pub work_seq: u64,
    pub workers: *mut submit_worker,
    pub next_free_worker: libc::c_uint,
    pub flush_cond: pthread_cond_t,
    pub flush_lock: pthread_mutex_t,
    pub stat_lock: pthread_mutex_t,
    pub wake_idle: libc::c_int,
}
#[repr(C)]
pub struct io_u {
    pub start_time: timespec,
    pub issue_time: timespec,
    pub file: *mut fio_file,
    pub flags: libc::c_uint,
    pub ddir: fio_ddir,
    pub acct_ddir: fio_ddir,
    pub numberio: libc::c_ushort,
    pub buflen: libc::c_ulonglong,
    pub offset: libc::c_ulonglong,
    pub buf: *mut libc::c_void,
    pub rand_seed: u64,
    pub xfer_buf: *mut libc::c_void,
    pub xfer_buflen: libc::c_ulonglong,
    pub buf_filled_len: libc::c_ulonglong,
    pub ipo: *mut io_piece,
    pub resid: libc::c_ulonglong,
    pub error: libc::c_uint,
    pub __bindgen_anon_1: io_u__bindgen_ty_1,
    pub __bindgen_anon_2: io_u__bindgen_ty_2,
    pub end_io: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut *mut io_u) -> libc::c_int,
    >,
    pub __bindgen_anon_3: io_u__bindgen_ty_3,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union io_u__bindgen_ty_1 {
    pub index: libc::c_uint,
    pub seen: libc::c_uint,
    pub engine_data: *mut libc::c_void,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union io_u__bindgen_ty_2 {
    pub verify_list: flist_head,
    pub work: workqueue_work,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union io_u__bindgen_ty_3 {
    pub mmap_data: *mut libc::c_void,
    _bindgen_union_align: u64,
}
pub const fio_q_status_FIO_Q_COMPLETED: fio_q_status = 0;
pub const fio_q_status_FIO_Q_QUEUED: fio_q_status = 1;
pub const fio_q_status_FIO_Q_BUSY: fio_q_status = 2;
pub type fio_q_status = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ioengine_ops {
    pub list: flist_head,
    pub name: *const libc::c_char,
    pub version: libc::c_int,
    pub flags: libc::c_int,
    pub setup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int>,
    pub init: ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int>,
    pub post_init:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int>,
    pub prep: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut io_u) -> libc::c_int,
    >,
    pub queue: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut io_u) -> fio_q_status,
    >,
    pub commit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int>,
    pub getevents: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut thread_data,
            arg2: libc::c_uint,
            arg3: libc::c_uint,
            arg4: *const timespec,
        ) -> libc::c_int,
    >,
    pub event: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: libc::c_int) -> *mut io_u,
    >,
    pub errdetails:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut io_u) -> *mut libc::c_char>,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut io_u) -> libc::c_int,
    >,
    pub cleanup: ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub open_file: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut fio_file) -> libc::c_int,
    >,
    pub close_file: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut fio_file) -> libc::c_int,
    >,
    pub invalidate: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut fio_file) -> libc::c_int,
    >,
    pub unlink_file: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut fio_file) -> libc::c_int,
    >,
    pub get_file_size: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut fio_file) -> libc::c_int,
    >,
    pub terminate: ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub iomem_alloc: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: usize) -> libc::c_int,
    >,
    pub iomem_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub io_u_init: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut io_u) -> libc::c_int,
    >,
    pub io_u_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data, arg2: *mut io_u)>,
    pub option_struct_size: libc::c_int,
    pub options: *mut fio_option,
}
pub const fio_ioengine_flags_FIO_SYNCIO: fio_ioengine_flags = 1;
pub const fio_ioengine_flags_FIO_RAWIO: fio_ioengine_flags = 2;
pub const fio_ioengine_flags_FIO_DISKLESSIO: fio_ioengine_flags = 4;
pub const fio_ioengine_flags_FIO_NOEXTEND: fio_ioengine_flags = 8;
pub const fio_ioengine_flags_FIO_NODISKUTIL: fio_ioengine_flags = 16;
pub const fio_ioengine_flags_FIO_UNIDIR: fio_ioengine_flags = 32;
pub const fio_ioengine_flags_FIO_NOIO: fio_ioengine_flags = 64;
pub const fio_ioengine_flags_FIO_PIPEIO: fio_ioengine_flags = 128;
pub const fio_ioengine_flags_FIO_BARRIER: fio_ioengine_flags = 256;
pub const fio_ioengine_flags_FIO_MEMALIGN: fio_ioengine_flags = 512;
pub const fio_ioengine_flags_FIO_BIT_BASED: fio_ioengine_flags = 1024;
pub const fio_ioengine_flags_FIO_FAKEIO: fio_ioengine_flags = 2048;
pub const fio_ioengine_flags_FIO_NOSTATS: fio_ioengine_flags = 4096;
pub const fio_ioengine_flags_FIO_NOFILEHASH: fio_ioengine_flags = 8192;
pub const fio_ioengine_flags_FIO_ASYNCIO_SYNC_TRIM: fio_ioengine_flags = 16384;
pub type fio_ioengine_flags = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_stat {
    pub max_val: u64,
    pub min_val: u64,
    pub samples: u64,
    pub mean: fio_fp64_t,
    pub S: fio_fp64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_hist {
    pub samples: u64,
    pub hist_last: libc::c_ulong,
    pub list: flist_head,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_logs {
    pub list: flist_head,
    pub nr_samples: u64,
    pub max_samples: u64,
    pub log: *mut libc::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_log {
    pub io_logs: flist_head,
    pub cur_log_max: u32,
    pub pending: *mut io_logs,
    pub log_ddir_mask: libc::c_uint,
    pub filename: *mut libc::c_char,
    pub td: *mut thread_data,
    pub log_type: libc::c_uint,
    pub disabled: bool_,
    pub log_offset: libc::c_uint,
    pub log_gz: libc::c_uint,
    pub log_gz_store: libc::c_uint,
    pub avg_window: [io_stat; 3usize],
    pub avg_msec: libc::c_ulong,
    pub avg_last: [libc::c_ulong; 3usize],
    pub hist_window: [io_hist; 3usize],
    pub hist_msec: libc::c_ulong,
    pub hist_coarseness: libc::c_uint,
    pub chunk_lock: pthread_mutex_t,
    pub chunk_seq: libc::c_uint,
    pub chunk_list: flist_head,
    pub deferred_free_lock: pthread_mutex_t,
    pub deferred_items: [*mut libc::c_void; 8usize],
    pub deferred: libc::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_piece {
    pub __bindgen_anon_1: io_piece__bindgen_ty_1,
    pub trim_list: flist_head,
    pub __bindgen_anon_2: io_piece__bindgen_ty_2,
    pub offset: libc::c_ulonglong,
    pub numberio: libc::c_ushort,
    pub len: libc::c_ulong,
    pub flags: libc::c_uint,
    pub ddir: fio_ddir,
    pub __bindgen_anon_3: io_piece__bindgen_ty_3,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union io_piece__bindgen_ty_1 {
    pub rb_node: fio_rb_node,
    pub list: flist_head,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union io_piece__bindgen_ty_2 {
    pub fileno: libc::c_int,
    pub file: *mut fio_file,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union io_piece__bindgen_ty_3 {
    pub delay: libc::c_ulong,
    pub file_action: libc::c_uint,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[repr(align(8))]
pub struct thread_stat {
    pub _bindgen_opaque_blob: [u64; 11843usize],
}
#[repr(C)]
#[repr(align(4))]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_1 {
    pub continue_on_error: u16,
    pub pad2: u32,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_2 {
    pub ss_iops_data: *mut u64,
    pub pad4: u64,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union thread_stat__bindgen_ty_3 {
    pub ss_bw_data: *mut u64,
    pub pad5: u64,
    _bindgen_union_align: u64,
}
pub const fio_cs_CS_GTOD: fio_cs = 1;
pub const fio_cs_CS_CGETTIME: fio_cs = 2;
pub const fio_cs_CS_CPUCLOCK: fio_cs = 3;
pub const fio_cs_CS_INVAL: fio_cs = 4;
pub type fio_cs = u32;
#[doc = " Pattern format description. The input for \'parse_pattern\'."]
#[doc = " Describes format with its name and callback, which should"]
#[doc = " be called to paste something inside the buffer."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pattern_fmt_desc {
    pub fmt: *const libc::c_char,
    pub len: libc::c_uint,
    pub paste: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut libc::c_char,
            len: libc::c_uint,
            priv_: *mut libc::c_void,
        ) -> libc::c_int,
    >,
}
#[doc = " Pattern format. The output of \'parse_pattern\'."]
#[doc = " Describes the exact position inside the xbuffer."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pattern_fmt {
    pub off: libc::c_uint,
    pub desc: *const pattern_fmt_desc,
}
pub const error_type_ERROR_TYPE_NONE: error_type = 0;
pub const error_type_ERROR_TYPE_READ: error_type = 1;
pub const error_type_ERROR_TYPE_WRITE: error_type = 2;
pub const error_type_ERROR_TYPE_VERIFY: error_type = 4;
pub const error_type_ERROR_TYPE_ANY: error_type = 65535;
pub type error_type = u32;
pub const fio_zone_mode_ZONE_MODE_NOT_SPECIFIED: fio_zone_mode = 0;
pub const fio_zone_mode_ZONE_MODE_NONE: fio_zone_mode = 1;
pub const fio_zone_mode_ZONE_MODE_STRIDED: fio_zone_mode = 2;
pub const fio_zone_mode_ZONE_MODE_ZBD: fio_zone_mode = 3;
pub type fio_zone_mode = u32;
pub const fio_memtype_MEM_MALLOC: fio_memtype = 0;
pub const fio_memtype_MEM_SHM: fio_memtype = 1;
pub const fio_memtype_MEM_SHMHUGE: fio_memtype = 2;
pub const fio_memtype_MEM_MMAP: fio_memtype = 3;
pub const fio_memtype_MEM_MMAPHUGE: fio_memtype = 4;
pub const fio_memtype_MEM_MMAPSHARED: fio_memtype = 5;
pub const fio_memtype_MEM_CUDA_MALLOC: fio_memtype = 6;
pub type fio_memtype = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bssplit {
    pub bs: u64,
    pub perc: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_split {
    pub access_perc: u8,
    pub size_perc: u8,
    pub pad: [u8; 6usize],
    pub size: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct thread_options {
    pub magic: libc::c_int,
    pub set_options: [u64; 8usize],
    pub description: *mut libc::c_char,
    pub name: *mut libc::c_char,
    pub wait_for: *mut libc::c_char,
    pub directory: *mut libc::c_char,
    pub filename: *mut libc::c_char,
    pub filename_format: *mut libc::c_char,
    pub opendir: *mut libc::c_char,
    pub ioengine: *mut libc::c_char,
    pub ioengine_so_path: *mut libc::c_char,
    pub mmapfile: *mut libc::c_char,
    pub td_ddir: td_ddir,
    pub rw_seq: libc::c_uint,
    pub kb_base: libc::c_uint,
    pub unit_base: libc::c_uint,
    pub ddir_seq_nr: libc::c_uint,
    pub ddir_seq_add: libc::c_longlong,
    pub iodepth: libc::c_uint,
    pub iodepth_low: libc::c_uint,
    pub iodepth_batch: libc::c_uint,
    pub iodepth_batch_complete_min: libc::c_uint,
    pub iodepth_batch_complete_max: libc::c_uint,
    pub serialize_overlap: libc::c_uint,
    pub unique_filename: libc::c_uint,
    pub size: libc::c_ulonglong,
    pub io_size: libc::c_ulonglong,
    pub size_percent: libc::c_uint,
    pub fill_device: libc::c_uint,
    pub file_append: libc::c_uint,
    pub file_size_low: libc::c_ulonglong,
    pub file_size_high: libc::c_ulonglong,
    pub start_offset: libc::c_ulonglong,
    pub start_offset_align: libc::c_ulonglong,
    pub bs: [libc::c_ulonglong; 3usize],
    pub ba: [libc::c_ulonglong; 3usize],
    pub min_bs: [libc::c_ulonglong; 3usize],
    pub max_bs: [libc::c_ulonglong; 3usize],
    pub bssplit: [*mut bssplit; 3usize],
    pub bssplit_nr: [libc::c_uint; 3usize],
    pub ignore_error: [*mut libc::c_int; 3usize],
    pub ignore_error_nr: [libc::c_uint; 3usize],
    pub error_dump: libc::c_uint,
    pub nr_files: libc::c_uint,
    pub open_files: libc::c_uint,
    pub file_lock_mode: file_lock_mode,
    pub odirect: libc::c_uint,
    pub oatomic: libc::c_uint,
    pub invalidate_cache: libc::c_uint,
    pub create_serialize: libc::c_uint,
    pub create_fsync: libc::c_uint,
    pub create_on_open: libc::c_uint,
    pub create_only: libc::c_uint,
    pub end_fsync: libc::c_uint,
    pub pre_read: libc::c_uint,
    pub sync_io: libc::c_uint,
    pub write_hint: libc::c_uint,
    pub verify: libc::c_uint,
    pub do_verify: libc::c_uint,
    pub verify_interval: libc::c_uint,
    pub verify_offset: libc::c_uint,
    pub verify_pattern: [libc::c_char; 512usize],
    pub verify_pattern_bytes: libc::c_uint,
    pub verify_fmt: [pattern_fmt; 8usize],
    pub verify_fmt_sz: libc::c_uint,
    pub verify_fatal: libc::c_uint,
    pub verify_dump: libc::c_uint,
    pub verify_async: libc::c_uint,
    pub verify_backlog: libc::c_ulonglong,
    pub verify_batch: libc::c_uint,
    pub experimental_verify: libc::c_uint,
    pub verify_state: libc::c_uint,
    pub verify_state_save: libc::c_uint,
    pub use_thread: libc::c_uint,
    pub unlink: libc::c_uint,
    pub unlink_each_loop: libc::c_uint,
    pub do_disk_util: libc::c_uint,
    pub override_sync: libc::c_uint,
    pub rand_repeatable: libc::c_uint,
    pub allrand_repeatable: libc::c_uint,
    pub rand_seed: libc::c_ulonglong,
    pub log_avg_msec: libc::c_uint,
    pub log_hist_msec: libc::c_uint,
    pub log_hist_coarseness: libc::c_uint,
    pub log_max: libc::c_uint,
    pub log_offset: libc::c_uint,
    pub log_gz: libc::c_uint,
    pub log_gz_store: libc::c_uint,
    pub log_unix_epoch: libc::c_uint,
    pub norandommap: libc::c_uint,
    pub softrandommap: libc::c_uint,
    pub bs_unaligned: libc::c_uint,
    pub fsync_on_close: libc::c_uint,
    pub bs_is_seq_rand: libc::c_uint,
    pub verify_only: libc::c_uint,
    pub random_distribution: libc::c_uint,
    pub exitall_error: libc::c_uint,
    pub zone_split: [*mut zone_split; 3usize],
    pub zone_split_nr: [libc::c_uint; 3usize],
    pub zipf_theta: fio_fp64_t,
    pub pareto_h: fio_fp64_t,
    pub gauss_dev: fio_fp64_t,
    pub random_generator: libc::c_uint,
    pub perc_rand: [libc::c_uint; 3usize],
    pub hugepage_size: libc::c_uint,
    pub rw_min_bs: libc::c_ulonglong,
    pub thinktime: libc::c_uint,
    pub thinktime_spin: libc::c_uint,
    pub thinktime_blocks: libc::c_uint,
    pub fsync_blocks: libc::c_uint,
    pub fdatasync_blocks: libc::c_uint,
    pub barrier_blocks: libc::c_uint,
    pub start_delay: libc::c_ulonglong,
    pub start_delay_orig: libc::c_ulonglong,
    pub start_delay_high: libc::c_ulonglong,
    pub timeout: libc::c_ulonglong,
    pub ramp_time: libc::c_ulonglong,
    pub ss_state: libc::c_uint,
    pub ss_limit: fio_fp64_t,
    pub ss_dur: libc::c_ulonglong,
    pub ss_ramp_time: libc::c_ulonglong,
    pub overwrite: libc::c_uint,
    pub bw_avg_time: libc::c_uint,
    pub iops_avg_time: libc::c_uint,
    pub loops: libc::c_uint,
    pub zone_range: libc::c_ulonglong,
    pub zone_size: libc::c_ulonglong,
    pub zone_skip: libc::c_ulonglong,
    pub zone_mode: fio_zone_mode,
    pub lockmem: libc::c_ulonglong,
    pub mem_type: fio_memtype,
    pub mem_align: libc::c_uint,
    pub max_latency: libc::c_ulonglong,
    pub stonewall: libc::c_uint,
    pub new_group: libc::c_uint,
    pub numjobs: libc::c_uint,
    pub cpumask: os_cpu_mask_t,
    pub verify_cpumask: os_cpu_mask_t,
    pub log_gz_cpumask: os_cpu_mask_t,
    pub cpus_allowed_policy: libc::c_uint,
    pub numa_cpunodes: *mut libc::c_char,
    pub numa_mem_mode: libc::c_ushort,
    pub numa_mem_prefer_node: libc::c_uint,
    pub numa_memnodes: *mut libc::c_char,
    pub gpu_dev_id: libc::c_uint,
    pub start_offset_percent: libc::c_uint,
    pub iolog: libc::c_uint,
    pub rwmixcycle: libc::c_uint,
    pub rwmix: [libc::c_uint; 3usize],
    pub nice: libc::c_uint,
    pub ioprio: libc::c_uint,
    pub ioprio_class: libc::c_uint,
    pub file_service_type: libc::c_uint,
    pub group_reporting: libc::c_uint,
    pub stats: libc::c_uint,
    pub fadvise_hint: libc::c_uint,
    pub fallocate_mode: fio_fallocate_mode,
    pub zero_buffers: libc::c_uint,
    pub refill_buffers: libc::c_uint,
    pub scramble_buffers: libc::c_uint,
    pub buffer_pattern: [libc::c_char; 512usize],
    pub buffer_pattern_bytes: libc::c_uint,
    pub compress_percentage: libc::c_uint,
    pub compress_chunk: libc::c_uint,
    pub dedupe_percentage: libc::c_uint,
    pub time_based: libc::c_uint,
    pub disable_lat: libc::c_uint,
    pub disable_clat: libc::c_uint,
    pub disable_slat: libc::c_uint,
    pub disable_bw: libc::c_uint,
    pub unified_rw_rep: libc::c_uint,
    pub gtod_reduce: libc::c_uint,
    pub gtod_cpu: libc::c_uint,
    pub clocksource: fio_cs,
    pub no_stall: libc::c_uint,
    pub trim_percentage: libc::c_uint,
    pub trim_batch: libc::c_uint,
    pub trim_zero: libc::c_uint,
    pub trim_backlog: libc::c_ulonglong,
    pub clat_percentiles: libc::c_uint,
    pub lat_percentiles: libc::c_uint,
    pub percentile_precision: libc::c_uint,
    pub percentile_list: [fio_fp64_t; 20usize],
    pub read_iolog_file: *mut libc::c_char,
    pub read_iolog_chunked: bool_,
    pub write_iolog_file: *mut libc::c_char,
    pub merge_blktrace_file: *mut libc::c_char,
    pub merge_blktrace_scalars: [fio_fp64_t; 20usize],
    pub merge_blktrace_iters: [fio_fp64_t; 20usize],
    pub write_bw_log: libc::c_uint,
    pub write_lat_log: libc::c_uint,
    pub write_iops_log: libc::c_uint,
    pub write_hist_log: libc::c_uint,
    pub bw_log_file: *mut libc::c_char,
    pub lat_log_file: *mut libc::c_char,
    pub iops_log_file: *mut libc::c_char,
    pub hist_log_file: *mut libc::c_char,
    pub replay_redirect: *mut libc::c_char,
    pub exec_prerun: *mut libc::c_char,
    pub exec_postrun: *mut libc::c_char,
    pub rate: [u64; 3usize],
    pub ratemin: [u64; 3usize],
    pub ratecycle: libc::c_uint,
    pub io_submit_mode: libc::c_uint,
    pub rate_iops: [libc::c_uint; 3usize],
    pub rate_iops_min: [libc::c_uint; 3usize],
    pub rate_process: libc::c_uint,
    pub rate_ign_think: libc::c_uint,
    pub ioscheduler: *mut libc::c_char,
    pub continue_on_error: error_type,
    pub profile: *mut libc::c_char,
    pub cgroup: *mut libc::c_char,
    pub cgroup_weight: libc::c_uint,
    pub cgroup_nodelete: libc::c_uint,
    pub uid: libc::c_uint,
    pub gid: libc::c_uint,
    pub flow_id: libc::c_int,
    pub flow: libc::c_int,
    pub flow_watermark: libc::c_int,
    pub flow_sleep: libc::c_uint,
    pub offset_increment_percent: libc::c_uint,
    pub offset_increment: libc::c_ulonglong,
    pub number_ios: libc::c_ulonglong,
    pub sync_file_range: libc::c_uint,
    pub latency_target: libc::c_ulonglong,
    pub latency_window: libc::c_ulonglong,
    pub latency_percentile: fio_fp64_t,
    pub sig_figs: libc::c_uint,
    pub block_error_hist: libc::c_uint,
    pub replay_align: libc::c_uint,
    pub replay_scale: libc::c_uint,
    pub replay_time_scale: libc::c_uint,
    pub replay_skip: libc::c_uint,
    pub per_job_logs: libc::c_uint,
    pub allow_create: libc::c_uint,
    pub allow_mounted_write: libc::c_uint,
    pub read_beyond_wp: libc::c_uint,
    pub max_open_zones: libc::c_int,
    pub zrt: fio_fp64_t,
    pub zrf: fio_fp64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prof_io_ops {
    pub td_init: ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data) -> libc::c_int>,
    pub td_exit: ::std::option::Option<unsafe extern "C" fn(arg1: *mut thread_data)>,
    pub io_u_lat: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut thread_data, arg2: u64) -> libc::c_int,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_sem {
    pub lock: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub value: libc::c_int,
    pub waiters: libc::c_int,
    pub magic: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct disk_util_stats {
    pub ios: [u64; 2usize],
    pub merges: [u64; 2usize],
    pub sectors: [u64; 2usize],
    pub ticks: [u64; 2usize],
    pub io_ticks: u64,
    pub time_in_queue: u64,
    pub msec: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct disk_util_stat {
    pub name: [u8; 64usize],
    pub s: disk_util_stats,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct disk_util_agg {
    pub ios: [u64; 2usize],
    pub merges: [u64; 2usize],
    pub sectors: [u64; 2usize],
    pub ticks: [u64; 2usize],
    pub io_ticks: u64,
    pub time_in_queue: u64,
    pub slavecount: u32,
    pub pad: u32,
    pub max_util: fio_fp64_t,
}
#[repr(C)]
pub struct disk_util {
    pub list: flist_head,
    pub slavelist: flist_head,
    pub sysfs_root: *mut libc::c_char,
    pub path: [libc::c_char; 1024usize],
    pub major: libc::c_int,
    pub minor: libc::c_int,
    pub dus: disk_util_stat,
    pub last_dus: disk_util_stat,
    pub agg: disk_util_agg,
    pub slaves: flist_head,
    pub time: timespec,
    pub lock: *mut fio_sem,
    pub users: libc::c_ulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sk_out {
    pub refs: libc::c_uint,
    pub sk: libc::c_int,
    pub lock: fio_sem,
    pub list: flist_head,
    pub wait: fio_sem,
    pub xmit: fio_sem,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_u_queue {
    pub io_us: *mut *mut io_u,
    pub nr: libc::c_uint,
    pub max: libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_u_ring {
    pub head: libc::c_uint,
    pub tail: libc::c_uint,
    pub max: libc::c_uint,
    pub ring: *mut *mut io_u,
}
#[repr(C)]
pub struct steadystate_data {
    pub limit: f64,
    pub dur: libc::c_ulonglong,
    pub ramp_time: libc::c_ulonglong,
    pub state: u32,
    pub head: libc::c_uint,
    pub tail: libc::c_uint,
    pub iops_data: *mut u64,
    pub bw_data: *mut u64,
    pub slope: f64,
    pub deviation: f64,
    pub criterion: f64,
    pub sum_y: u64,
    pub sum_x: u64,
    pub sum_x_sq: u64,
    pub sum_xy: u64,
    pub oldest_y: u64,
    pub prev_time: timespec,
    pub prev_iops: u64,
    pub prev_bytes: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_split_index {
    pub size_perc: u8,
    pub size_perc_prev: u8,
    pub size: u64,
    pub size_prev: u64,
}
#[repr(C)]
pub struct thread_data {
    pub opt_list: flist_head,
    pub flags: libc::c_ulong,
    pub o: thread_options,
    pub eo: *mut libc::c_void,
    pub thread: pthread_t,
    pub thread_number: libc::c_uint,
    pub subjob_number: libc::c_uint,
    pub groupid: libc::c_uint,
    pub ts: thread_stat,
    pub client_type: libc::c_int,
    pub slat_log: *mut io_log,
    pub clat_log: *mut io_log,
    pub clat_hist_log: *mut io_log,
    pub lat_log: *mut io_log,
    pub bw_log: *mut io_log,
    pub iops_log: *mut io_log,
    pub log_compress_wq: workqueue,
    pub parent: *mut thread_data,
    pub stat_io_bytes: [u64; 3usize],
    pub bw_sample_time: timespec,
    pub stat_io_blocks: [u64; 3usize],
    pub iops_sample_time: timespec,
    pub update_rusage: libc::c_int,
    pub rusage_sem: *mut fio_sem,
    pub ru_start: rusage,
    pub ru_end: rusage,
    pub files: *mut *mut fio_file,
    pub file_locks: *mut libc::c_uchar,
    pub files_size: libc::c_uint,
    pub files_index: libc::c_uint,
    pub nr_open_files: libc::c_uint,
    pub nr_done_files: libc::c_uint,
    pub __bindgen_anon_1: thread_data__bindgen_ty_1,
    pub __bindgen_anon_2: thread_data__bindgen_ty_2,
    pub __bindgen_anon_3: thread_data__bindgen_ty_3,
    pub error: libc::c_int,
    pub sig: libc::c_int,
    pub done: libc::c_int,
    pub stop_io: libc::c_int,
    pub pid: pid_t,
    pub orig_buffer: *mut libc::c_char,
    pub orig_buffer_size: usize,
    pub runstate: libc::c_int,
    pub terminate: bool_,
    pub last_was_sync: bool_,
    pub last_ddir: fio_ddir,
    pub mmapfd: libc::c_int,
    pub iolog_buf: *mut libc::c_void,
    pub iolog_f: *mut FILE,
    pub rand_seeds: [u64; 19usize],
    pub bsrange_state: [frand_state; 3usize],
    pub verify_state: frand_state,
    pub trim_state: frand_state,
    pub delay_state: frand_state,
    pub buf_state: frand_state,
    pub buf_state_prev: frand_state,
    pub dedupe_state: frand_state,
    pub zone_state: frand_state,
    pub zone_state_index: *mut *mut zone_split_index,
    pub verify_batch: libc::c_uint,
    pub trim_batch: libc::c_uint,
    pub vstate: *mut thread_io_list,
    pub shm_id: libc::c_int,
    pub io_ops: *mut ioengine_ops,
    pub io_ops_init: libc::c_int,
    pub io_ops_data: *mut libc::c_void,
    pub io_ops_dlhandle: *mut libc::c_void,
    pub cur_depth: libc::c_uint,
    pub io_u_queued: libc::c_uint,
    pub io_u_in_flight: libc::c_uint,
    pub io_u_requeues: io_u_ring,
    pub io_u_freelist: io_u_queue,
    pub io_u_all: io_u_queue,
    pub io_u_lock: pthread_mutex_t,
    pub free_cond: pthread_cond_t,
    pub verify_list: flist_head,
    pub verify_threads: *mut pthread_t,
    pub nr_verify_threads: libc::c_uint,
    pub verify_cond: pthread_cond_t,
    pub verify_thread_exit: libc::c_int,
    pub rate_bps: [u64; 3usize],
    pub rate_next_io_time: [u64; 3usize],
    pub rate_bytes: [libc::c_ulong; 3usize],
    pub rate_blocks: [libc::c_ulong; 3usize],
    pub rate_io_issue_bytes: [libc::c_ulonglong; 3usize],
    pub lastrate: [timespec; 3usize],
    pub last_usec: [i64; 3usize],
    pub poisson_state: [frand_state; 3usize],
    pub io_wq: workqueue,
    pub total_io_size: u64,
    pub fill_device_size: u64,
    pub io_issues: [u64; 3usize],
    pub io_issue_bytes: [u64; 3usize],
    pub loops: u64,
    pub io_blocks: [u64; 3usize],
    pub this_io_blocks: [u64; 3usize],
    pub io_bytes: [u64; 3usize],
    pub this_io_bytes: [u64; 3usize],
    pub io_skip_bytes: u64,
    pub zone_bytes: u64,
    pub sem: *mut fio_sem,
    pub bytes_done: [u64; 3usize],
    pub random_state: frand_state,
    pub start: timespec,
    pub epoch: timespec,
    pub unix_epoch: libc::c_ulonglong,
    pub last_issue: timespec,
    pub time_offset: libc::c_long,
    pub ts_cache: timespec,
    pub terminate_time: timespec,
    pub ts_cache_nr: libc::c_uint,
    pub ts_cache_mask: libc::c_uint,
    pub ramp_time_over: bool_,
    pub latency_ts: timespec,
    pub latency_qd: libc::c_uint,
    pub latency_qd_high: libc::c_uint,
    pub latency_qd_low: libc::c_uint,
    pub latency_failed: libc::c_uint,
    pub latency_ios: u64,
    pub latency_end_run: libc::c_int,
    pub rwmix_state: frand_state,
    pub rwmix_issues: libc::c_ulong,
    pub rwmix_ddir: fio_ddir,
    pub ddir_seq_nr: libc::c_uint,
    pub seq_rand_state: [frand_state; 3usize],
    pub io_hist_tree: rb_root,
    pub io_hist_list: flist_head,
    pub io_hist_len: libc::c_ulong,
    pub io_log_list: flist_head,
    pub io_log_rfile: *mut FILE,
    pub io_log_current: libc::c_uint,
    pub io_log_checkmark: libc::c_uint,
    pub io_log_highmark: libc::c_uint,
    pub io_log_highmark_time: timespec,
    pub trim_list: flist_head,
    pub trim_entries: libc::c_ulong,
    pub file_service_nr: libc::c_uint,
    pub file_service_left: libc::c_uint,
    pub file_service_file: *mut fio_file,
    pub sync_file_range_nr: libc::c_uint,
    pub file_size_state: frand_state,
    pub total_err_count: libc::c_uint,
    pub first_error: libc::c_int,
    pub flow: *mut fio_flow,
    pub prof_io_ops: prof_io_ops,
    pub prof_data: *mut libc::c_void,
    pub pinned_mem: *mut libc::c_void,
    pub ss: steadystate_data,
    pub verror: [libc::c_char; 128usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union thread_data__bindgen_ty_1 {
    pub next_file: libc::c_uint,
    pub next_file_state: frand_state,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union thread_data__bindgen_ty_2 {
    pub next_file_zipf: zipf_state,
    pub next_file_gauss: gauss_state,
    _bindgen_union_align: [u64; 13usize],
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union thread_data__bindgen_ty_3 {
    pub zipf_theta: f64,
    pub pareto_h: f64,
    pub gauss_dev: f64,
    _bindgen_union_align: u64,
}
pub const opt_category___FIO_OPT_C_GENERAL: opt_category = 0;
pub const opt_category___FIO_OPT_C_IO: opt_category = 1;
pub const opt_category___FIO_OPT_C_FILE: opt_category = 2;
pub const opt_category___FIO_OPT_C_STAT: opt_category = 3;
pub const opt_category___FIO_OPT_C_LOG: opt_category = 4;
pub const opt_category___FIO_OPT_C_PROFILE: opt_category = 5;
pub const opt_category___FIO_OPT_C_ENGINE: opt_category = 6;
pub const opt_category___FIO_OPT_C_NR: opt_category = 7;
pub const opt_category_FIO_OPT_C_GENERAL: opt_category = 1;
pub const opt_category_FIO_OPT_C_IO: opt_category = 2;
pub const opt_category_FIO_OPT_C_FILE: opt_category = 4;
pub const opt_category_FIO_OPT_C_STAT: opt_category = 8;
pub const opt_category_FIO_OPT_C_LOG: opt_category = 16;
pub const opt_category_FIO_OPT_C_PROFILE: opt_category = 32;
pub const opt_category_FIO_OPT_C_ENGINE: opt_category = 64;
pub const opt_category_FIO_OPT_C_INVALID: opt_category = 128;
pub type opt_category = u32;
pub const opt_category_group___FIO_OPT_G_RATE: opt_category_group = 0;
pub const opt_category_group___FIO_OPT_G_ZONE: opt_category_group = 1;
pub const opt_category_group___FIO_OPT_G_RWMIX: opt_category_group = 2;
pub const opt_category_group___FIO_OPT_G_VERIFY: opt_category_group = 3;
pub const opt_category_group___FIO_OPT_G_TRIM: opt_category_group = 4;
pub const opt_category_group___FIO_OPT_G_IOLOG: opt_category_group = 5;
pub const opt_category_group___FIO_OPT_G_IO_DEPTH: opt_category_group = 6;
pub const opt_category_group___FIO_OPT_G_IO_FLOW: opt_category_group = 7;
pub const opt_category_group___FIO_OPT_G_DESC: opt_category_group = 8;
pub const opt_category_group___FIO_OPT_G_FILENAME: opt_category_group = 9;
pub const opt_category_group___FIO_OPT_G_IO_BASIC: opt_category_group = 10;
pub const opt_category_group___FIO_OPT_G_CGROUP: opt_category_group = 11;
pub const opt_category_group___FIO_OPT_G_RUNTIME: opt_category_group = 12;
pub const opt_category_group___FIO_OPT_G_PROCESS: opt_category_group = 13;
pub const opt_category_group___FIO_OPT_G_CRED: opt_category_group = 14;
pub const opt_category_group___FIO_OPT_G_CLOCK: opt_category_group = 15;
pub const opt_category_group___FIO_OPT_G_IO_TYPE: opt_category_group = 16;
pub const opt_category_group___FIO_OPT_G_THINKTIME: opt_category_group = 17;
pub const opt_category_group___FIO_OPT_G_RANDOM: opt_category_group = 18;
pub const opt_category_group___FIO_OPT_G_IO_BUF: opt_category_group = 19;
pub const opt_category_group___FIO_OPT_G_TIOBENCH: opt_category_group = 20;
pub const opt_category_group___FIO_OPT_G_ERR: opt_category_group = 21;
pub const opt_category_group___FIO_OPT_G_E4DEFRAG: opt_category_group = 22;
pub const opt_category_group___FIO_OPT_G_NETIO: opt_category_group = 23;
pub const opt_category_group___FIO_OPT_G_RDMA: opt_category_group = 24;
pub const opt_category_group___FIO_OPT_G_LIBAIO: opt_category_group = 25;
pub const opt_category_group___FIO_OPT_G_ACT: opt_category_group = 26;
pub const opt_category_group___FIO_OPT_G_LATPROF: opt_category_group = 27;
pub const opt_category_group___FIO_OPT_G_RBD: opt_category_group = 28;
pub const opt_category_group___FIO_OPT_G_HTTP: opt_category_group = 29;
pub const opt_category_group___FIO_OPT_G_GFAPI: opt_category_group = 30;
pub const opt_category_group___FIO_OPT_G_MTD: opt_category_group = 31;
pub const opt_category_group___FIO_OPT_G_HDFS: opt_category_group = 32;
pub const opt_category_group___FIO_OPT_G_SG: opt_category_group = 33;
pub const opt_category_group___FIO_OPT_G_MMAP: opt_category_group = 34;
pub const opt_category_group___FIO_OPT_G_ISCSI: opt_category_group = 35;
pub const opt_category_group___FIO_OPT_G_NBD: opt_category_group = 36;
pub const opt_category_group___FIO_OPT_G_IOURING: opt_category_group = 37;
pub const opt_category_group___FIO_OPT_G_NR: opt_category_group = 38;
pub const opt_category_group_FIO_OPT_G_RATE: opt_category_group = 1;
pub const opt_category_group_FIO_OPT_G_ZONE: opt_category_group = 2;
pub const opt_category_group_FIO_OPT_G_RWMIX: opt_category_group = 4;
pub const opt_category_group_FIO_OPT_G_VERIFY: opt_category_group = 8;
pub const opt_category_group_FIO_OPT_G_TRIM: opt_category_group = 16;
pub const opt_category_group_FIO_OPT_G_IOLOG: opt_category_group = 32;
pub const opt_category_group_FIO_OPT_G_IO_DEPTH: opt_category_group = 64;
pub const opt_category_group_FIO_OPT_G_IO_FLOW: opt_category_group = 128;
pub const opt_category_group_FIO_OPT_G_DESC: opt_category_group = 256;
pub const opt_category_group_FIO_OPT_G_FILENAME: opt_category_group = 512;
pub const opt_category_group_FIO_OPT_G_IO_BASIC: opt_category_group = 1024;
pub const opt_category_group_FIO_OPT_G_CGROUP: opt_category_group = 2048;
pub const opt_category_group_FIO_OPT_G_RUNTIME: opt_category_group = 4096;
pub const opt_category_group_FIO_OPT_G_PROCESS: opt_category_group = 8192;
pub const opt_category_group_FIO_OPT_G_CRED: opt_category_group = 16384;
pub const opt_category_group_FIO_OPT_G_CLOCK: opt_category_group = 32768;
pub const opt_category_group_FIO_OPT_G_IO_TYPE: opt_category_group = 65536;
pub const opt_category_group_FIO_OPT_G_THINKTIME: opt_category_group = 131072;
pub const opt_category_group_FIO_OPT_G_RANDOM: opt_category_group = 262144;
pub const opt_category_group_FIO_OPT_G_IO_BUF: opt_category_group = 524288;
pub const opt_category_group_FIO_OPT_G_TIOBENCH: opt_category_group = 1048576;
pub const opt_category_group_FIO_OPT_G_ERR: opt_category_group = 2097152;
pub const opt_category_group_FIO_OPT_G_E4DEFRAG: opt_category_group = 4194304;
pub const opt_category_group_FIO_OPT_G_NETIO: opt_category_group = 8388608;
pub const opt_category_group_FIO_OPT_G_RDMA: opt_category_group = 16777216;
pub const opt_category_group_FIO_OPT_G_LIBAIO: opt_category_group = 33554432;
pub const opt_category_group_FIO_OPT_G_ACT: opt_category_group = 67108864;
pub const opt_category_group_FIO_OPT_G_LATPROF: opt_category_group = 134217728;
pub const opt_category_group_FIO_OPT_G_RBD: opt_category_group = 268435456;
pub const opt_category_group_FIO_OPT_G_HTTP: opt_category_group = 536870912;
pub const opt_category_group_FIO_OPT_G_GFAPI: opt_category_group = 1073741824;
pub const opt_category_group_FIO_OPT_G_MTD: opt_category_group = 2147483648;
pub const opt_category_group_FIO_OPT_G_HDFS: opt_category_group = 4294967296;
pub const opt_category_group_FIO_OPT_G_SG: opt_category_group = 8589934592;
pub const opt_category_group_FIO_OPT_G_MMAP: opt_category_group = 17179869184;
pub const opt_category_group_FIO_OPT_G_INVALID: opt_category_group = 274877906944;
pub const opt_category_group_FIO_OPT_G_ISCSI: opt_category_group = 34359738368;
pub const opt_category_group_FIO_OPT_G_NBD: opt_category_group = 68719476736;
pub const opt_category_group_FIO_OPT_G_IOURING: opt_category_group = 137438953472;
pub type opt_category_group = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_rwlock {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_io_list {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fio_flow {
    pub _address: u8,
}
